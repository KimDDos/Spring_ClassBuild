[New Spring Project] class 설정을 활용한 Spring 활용방안

1. 기존 Legacy project - mvc 패턴 활용
2. preference 설정 동일 
	- Encoding 설정
	- java builed path / library 수정
	- project propertice 수정

3. 라이브러리 추가
	정리필요

4. HikariCP 라이브러리 추가
	google에 검색후 깃허브에서 atifact 긁어오기

5. llogback.xml 작성
	logger 설정으로 원하는 값을 추출하는 것을 제어 가능
	log4j2 에서도 사용가능하니 잘 확인, 로그 확인하는 연습도 할 것

6. 'src/main/resources' 경로에 log4jdbclog4jdbc.log4j2.properties 파일을 생성
	log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator

7. pom.xml에서 build 부분에서 web.xml을 로드하게 되는데 삭제했으니까 다른 내용 입력
	마지막 플러그인 끝난 다음줄에 입력
	아래와 같은 구문은 webxml이 없으면 fail을 띄울거냐고 물어보는거임
	<failOnMissingWebXml>false</failOnMissingWebXml> 

8. Config 패키지에 WebConfig 클래스 생성
	extends AbstractAnnotationConfigDispatcherServletInitializer 를 상속(extends)
	override 메서드들 작성

9. servletConfiguration 구현 [ServletConfig의 클래스가 따로 있기에 이름을 같게 하면 안 됨]
	implements WebMvcConfigurer 
	구현 : 
	1. [annotation-driven] => @EnableWebMvc
	2. [resources] => addResourceHandlers method
	3. [InternalResourceViewResolver] => configureViewResolvers method
	4. [StandardServletMultipartResolver] => configureViewResolvers method
	5. components-scan은  어노테이션으로 설정
	   - 설정간 베이스는 모두를 쓰기보다는 세부적으로 적는것을 추천

------ 24-12-04 ------

-  java Config 설정 프로젝트
1. pom.xml
2. 패키지 생성 / 폴더 생성
3. WebConfig.java 생성 => 전반적인 설정
4. ServletConfiguration.java 생성  => 화면 / 경로 관련 설정
5. rootConfig.java 생성 => DB 관련 설정

DB 생성
-- DB 생성
create database mywebdb;
-- User 생성
create user 'mywebUser'@'localhost' identified by 'mysql';
-- 권한부여
grant all privileges on mywebdb.* to 'mywebUser'@'localhost' with grant option;
-- 권한 설정 완료
flush privileges;

10. rootConfig
	ApplicationContext 작성 (@autowired)
	DataSource 설정, SqlSessionFactory 설정
	DataSourceTransactionManager 설정

일반적으로 DB는 _로 단어구분
read_count(SQL의 구분) >> readCount(자바의 구분)
// 변경하는 역할

DB 테이블 생성
create table board(
bno bigint not null auto_increment,
title varchar(200) not null,
writer varchar(100) not null,
content text not null,
reg_at datetime default now(),
mod_at datetime default now(),
read_count int default 0,
cmt_qty int default 0,
has_file int default 0,
primary key(bno));

@RequiredArgsConstructor
	private final BoardService bsv;
	이건 따로 공부가 필요할듯?

-------------------------------------------------------
24-01-08

Paging 
 - list의 내용을 10개씩 끊어서 출력
select * from board order by bno desc limit 0, 10;

limit 시작번지, 개수
< 1 2 3 4 5 6 7 8 9 10 >
1page => limit 0, 10  =>  (PageNo - 1) * 10 >> start
2page => limit 10, 10  =>  (2 - 1) * 10 >> start
3page => limit 20, 10  =>  (3 - 1) * 10 >> start
4page => limit 30, 10

----------------------------------------------------------
24-01-10
파일 업로드
pom.xml

D:\KDY\_myProject\_java\_fileUpload
++ 위에 있는거 복사할때 복사된 값을 복사해서 들고갈 경우
D:\\KDY\\_myProject\\_java\\_fileUpload
-> 이렇게 File.seperator가 두개씩 되니까 유의

file 설정
 - servletConfig 
    => 업로드 경로 설정
 - webConfig
    => maxFIleSize, maxReqSize, fileSize Threshold

파일 테이블 구성
파일VO 생성
create table file(
uuid varchar(256) not null,
save_dir varchar(256) not null,
file_name varchar(256) not null,
file_type tinyint(1) default 0,
bno bigint,
file_size bigint,
reg_at datetime default now(),
primary key(uuid));

------------------------------------------------------------
2024-01-12
전체 리스트에서 bno 일치하는 댓글 갯수 update 
update board b set cmt_qty = 
(select count(bno) from comment where bno = b.bno),
has_file = 
(select count(bno) from file where bno = b.bno)


Sweeper : 청소부, 실제 폴더안에 있는 파일을 삭제
DB의 파일명과 폴더안의 파일을 비교하여 일치하지 않는 값이 있다면 삭제
(폴더에서 삭제)
[JSP에 file 삭제 핸들러 있음, 추후 시도 해보셈]
스케줄러 기능
해당 스케줄에 맞춰 자동으로 실행!

pom.xml
 - quartz-scheduler 2.3.2
 - quartz-jobs 2.3.2

--------------------------------------------------------------------
2024- 01 - 12

Security

Member
- 회원가입 => db에 저장

- 로그인
   Id/Pw => db 일치하는 값이 있는지 확인 => 로그인 진행(session 저장)
- 로그아웃(session 끊기)

User의 권한
- admin
[ - manager : 생략 ]
- user

User 권한
- Role_ADMIN
- Role_USER

- security pom.xml 설정
spring-security-core 5.5.3
spring-security-web 5.5.3
spring-security-config 5.5.3
spring-security-taglib 5.5.3


테이블 생성
create table member(
email varchar(100) not null,
pwd varchar(1000) not null,
nick_name varchar(100) not null,
reg_at datetime default now(),
last_login datetime default null,
primary key(email));


create table auth_member(
email varchar(100) not null,
auth varchar(50) not null )
// 멤버에 포함된 하위키이기에 primary key x

alter table auth_member add constraint fk_auth 
foreign key(email) references member(email);

